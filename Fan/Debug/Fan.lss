
Fan.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a0e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001e  00800060  00000a0e  00000a82  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000aa0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000ad0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b0  00000000  00000000  00000b0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e75  00000000  00000000  00000bbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000852  00000000  00000000  00001a31  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000807  00000000  00000000  00002283  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000144  00000000  00000000  00002a8c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003fc  00000000  00000000  00002bd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000848  00000000  00000000  00002fcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  00003814  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e0       	ldi	r30, 0x0E	; 14
  68:	fa e0       	ldi	r31, 0x0A	; 10
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 37       	cpi	r26, 0x7E	; 126
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 56 01 	call	0x2ac	; 0x2ac <main>
  7a:	0c 94 05 05 	jmp	0xa0a	; 0xa0a <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <ADC_Init>:
#include <avr/io.h>
#include <util/delay.h>

void ADC_Init()
{
	setbit(ADMUX,REFS0);
  82:	87 b1       	in	r24, 0x07	; 7
  84:	80 64       	ori	r24, 0x40	; 64
  86:	87 b9       	out	0x07, r24	; 7
	setbit(ADMUX,REFS1);
  88:	87 b1       	in	r24, 0x07	; 7
  8a:	80 68       	ori	r24, 0x80	; 128
  8c:	87 b9       	out	0x07, r24	; 7
	setbit(ADCSRA,ADEN);
  8e:	86 b1       	in	r24, 0x06	; 6
  90:	80 68       	ori	r24, 0x80	; 128
  92:	86 b9       	out	0x06, r24	; 6
	setbit(ADCSRA,ADPS2);
  94:	86 b1       	in	r24, 0x06	; 6
  96:	84 60       	ori	r24, 0x04	; 4
  98:	86 b9       	out	0x06, r24	; 6
  9a:	08 95       	ret

0000009c <ADC_Read>:
}

int ADC_Read(char ch)
{
	int value=-1;
	if(ch>=0 && ch<=8)
  9c:	89 30       	cpi	r24, 0x09	; 9
  9e:	b8 f4       	brcc	.+46     	; 0xce <ADC_Read+0x32>
	{
		ADMUX = (ADMUX & 0xE0) | ch; //channel selection 
  a0:	97 b1       	in	r25, 0x07	; 7
  a2:	90 7e       	andi	r25, 0xE0	; 224
  a4:	89 2b       	or	r24, r25
  a6:	87 b9       	out	0x07, r24	; 7
		setbit(ADCSRA,ADSC);
  a8:	86 b1       	in	r24, 0x06	; 6
  aa:	80 64       	ori	r24, 0x40	; 64
  ac:	86 b9       	out	0x06, r24	; 6
		while(Readbit(ADCSRA,ADIF) != 1);
  ae:	34 9b       	sbis	0x06, 4	; 6
  b0:	fe cf       	rjmp	.-4      	; 0xae <ADC_Read+0x12>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b2:	89 ef       	ldi	r24, 0xF9	; 249
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	01 97       	sbiw	r24, 0x01	; 1
  b8:	f1 f7       	brne	.-4      	; 0xb6 <ADC_Read+0x1a>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <ADC_Read+0x20>
  bc:	00 00       	nop
		_delay_ms(1);
		value = (int)ADCL + (int)ADCH * 256;
  be:	24 b1       	in	r18, 0x04	; 4
  c0:	85 b1       	in	r24, 0x05	; 5
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	98 2f       	mov	r25, r24
  c6:	88 27       	eor	r24, r24
  c8:	82 0f       	add	r24, r18
  ca:	91 1d       	adc	r25, r1
  cc:	08 95       	ret
	setbit(ADCSRA,ADPS2);
}

int ADC_Read(char ch)
{
	int value=-1;
  ce:	8f ef       	ldi	r24, 0xFF	; 255
  d0:	9f ef       	ldi	r25, 0xFF	; 255
		while(Readbit(ADCSRA,ADIF) != 1);
		_delay_ms(1);
		value = (int)ADCL + (int)ADCH * 256;
	}
	return value;
  d2:	08 95       	ret

000000d4 <Send_4bit_Char>:
	
}

void Send_4bit_Char(char data)
{
    PORTA = (PORTA & 0x0F) | (data & 0xF0); 
  d4:	9b b3       	in	r25, 0x1b	; 27
  d6:	9f 70       	andi	r25, 0x0F	; 15
  d8:	28 2f       	mov	r18, r24
  da:	20 7f       	andi	r18, 0xF0	; 240
  dc:	92 2b       	or	r25, r18
  de:	9b bb       	out	0x1b, r25	; 27
	setbit(PORTB,RS); // Send Data
  e0:	98 b3       	in	r25, 0x18	; 24
  e2:	92 60       	ori	r25, 0x02	; 2
  e4:	98 bb       	out	0x18, r25	; 24
	clrbit(PORTB,RW); // Write Data
  e6:	98 b3       	in	r25, 0x18	; 24
  e8:	9b 7f       	andi	r25, 0xFB	; 251
  ea:	98 bb       	out	0x18, r25	; 24
	setbit(PORTB,En); // For the LCD to take the data
  ec:	98 b3       	in	r25, 0x18	; 24
  ee:	91 60       	ori	r25, 0x01	; 1
  f0:	98 bb       	out	0x18, r25	; 24
  f2:	e3 ec       	ldi	r30, 0xC3	; 195
  f4:	f9 e0       	ldi	r31, 0x09	; 9
  f6:	31 97       	sbiw	r30, 0x01	; 1
  f8:	f1 f7       	brne	.-4      	; 0xf6 <Send_4bit_Char+0x22>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <Send_4bit_Char+0x28>
  fc:	00 00       	nop
	_delay_ms(10);
	clrbit(PORTB,En); // To make LCD display the sent data
  fe:	98 b3       	in	r25, 0x18	; 24
 100:	9e 7f       	andi	r25, 0xFE	; 254
 102:	98 bb       	out	0x18, r25	; 24
	PORTA = (PORTA & 0x0F) | (data << 4); 
 104:	2b b3       	in	r18, 0x1b	; 27
 106:	f0 e1       	ldi	r31, 0x10	; 16
 108:	8f 9f       	mul	r24, r31
 10a:	c0 01       	movw	r24, r0
 10c:	11 24       	eor	r1, r1
 10e:	92 2f       	mov	r25, r18
 110:	9f 70       	andi	r25, 0x0F	; 15
 112:	89 2b       	or	r24, r25
 114:	8b bb       	out	0x1b, r24	; 27
 116:	83 ec       	ldi	r24, 0xC3	; 195
 118:	99 e0       	ldi	r25, 0x09	; 9
 11a:	01 97       	sbiw	r24, 0x01	; 1
 11c:	f1 f7       	brne	.-4      	; 0x11a <Send_4bit_Char+0x46>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <Send_4bit_Char+0x4c>
 120:	00 00       	nop
	_delay_ms(10);
	setbit(PORTB,En);
 122:	88 b3       	in	r24, 0x18	; 24
 124:	81 60       	ori	r24, 0x01	; 1
 126:	88 bb       	out	0x18, r24	; 24
 128:	e3 ec       	ldi	r30, 0xC3	; 195
 12a:	f9 e0       	ldi	r31, 0x09	; 9
 12c:	31 97       	sbiw	r30, 0x01	; 1
 12e:	f1 f7       	brne	.-4      	; 0x12c <Send_4bit_Char+0x58>
 130:	00 c0       	rjmp	.+0      	; 0x132 <Send_4bit_Char+0x5e>
 132:	00 00       	nop
	_delay_ms(10);
	clrbit(PORTB,En);
 134:	88 b3       	in	r24, 0x18	; 24
 136:	8e 7f       	andi	r24, 0xFE	; 254
 138:	88 bb       	out	0x18, r24	; 24
 13a:	08 95       	ret

0000013c <Send_4bit_Number>:
#include <util/delay.h>
#include "STD_MacRos.h"
#include "LCD.h"

void Send_4bit_Number(int data)
{
 13c:	0f 93       	push	r16
 13e:	1f 93       	push	r17
 140:	cf 93       	push	r28
 142:	df 93       	push	r29
 144:	cd b7       	in	r28, 0x3d	; 61
 146:	de b7       	in	r29, 0x3e	; 62
 148:	2a 97       	sbiw	r28, 0x0a	; 10
 14a:	0f b6       	in	r0, 0x3f	; 63
 14c:	f8 94       	cli
 14e:	de bf       	out	0x3e, r29	; 62
 150:	0f be       	out	0x3f, r0	; 63
 152:	cd bf       	out	0x3d, r28	; 61
	int i=0,digits=0;
 154:	00 e0       	ldi	r16, 0x00	; 0
 156:	10 e0       	ldi	r17, 0x00	; 0
 158:	20 e0       	ldi	r18, 0x00	; 0
 15a:	30 e0       	ldi	r19, 0x00	; 0
	char arr[10];
	
	while (data != 0)
 15c:	11 c0       	rjmp	.+34     	; 0x180 <Send_4bit_Number+0x44>
	{
		arr[i]=data%10;
 15e:	6a e0       	ldi	r22, 0x0A	; 10
 160:	70 e0       	ldi	r23, 0x00	; 0
 162:	0e 94 42 04 	call	0x884	; 0x884 <__divmodhi4>
 166:	e1 e0       	ldi	r30, 0x01	; 1
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	ec 0f       	add	r30, r28
 16c:	fd 1f       	adc	r31, r29
 16e:	e2 0f       	add	r30, r18
 170:	f3 1f       	adc	r31, r19
 172:	80 83       	st	Z, r24
		i++;
 174:	2f 5f       	subi	r18, 0xFF	; 255
 176:	3f 4f       	sbci	r19, 0xFF	; 255
		data=data/10;
 178:	86 2f       	mov	r24, r22
 17a:	97 2f       	mov	r25, r23
		digits++;
 17c:	0f 5f       	subi	r16, 0xFF	; 255
 17e:	1f 4f       	sbci	r17, 0xFF	; 255
void Send_4bit_Number(int data)
{
	int i=0,digits=0;
	char arr[10];
	
	while (data != 0)
 180:	00 97       	sbiw	r24, 0x00	; 0
 182:	69 f7       	brne	.-38     	; 0x15e <Send_4bit_Number+0x22>
		i++;
		data=data/10;
		digits++;
	}
	
	for(i=digits-1 ; i>=0 ; i--)
 184:	01 50       	subi	r16, 0x01	; 1
 186:	11 09       	sbc	r17, r1
 188:	0c c0       	rjmp	.+24     	; 0x1a2 <Send_4bit_Number+0x66>
	{
		Send_4bit_Char(arr[i]+48); 
 18a:	e1 e0       	ldi	r30, 0x01	; 1
 18c:	f0 e0       	ldi	r31, 0x00	; 0
 18e:	ec 0f       	add	r30, r28
 190:	fd 1f       	adc	r31, r29
 192:	e0 0f       	add	r30, r16
 194:	f1 1f       	adc	r31, r17
 196:	80 81       	ld	r24, Z
 198:	80 5d       	subi	r24, 0xD0	; 208
 19a:	0e 94 6a 00 	call	0xd4	; 0xd4 <Send_4bit_Char>
		i++;
		data=data/10;
		digits++;
	}
	
	for(i=digits-1 ; i>=0 ; i--)
 19e:	01 50       	subi	r16, 0x01	; 1
 1a0:	11 09       	sbc	r17, r1
 1a2:	11 23       	and	r17, r17
 1a4:	94 f7       	brge	.-28     	; 0x18a <Send_4bit_Number+0x4e>
	{
		Send_4bit_Char(arr[i]+48); 
	}
	
}
 1a6:	2a 96       	adiw	r28, 0x0a	; 10
 1a8:	0f b6       	in	r0, 0x3f	; 63
 1aa:	f8 94       	cli
 1ac:	de bf       	out	0x3e, r29	; 62
 1ae:	0f be       	out	0x3f, r0	; 63
 1b0:	cd bf       	out	0x3d, r28	; 61
 1b2:	df 91       	pop	r29
 1b4:	cf 91       	pop	r28
 1b6:	1f 91       	pop	r17
 1b8:	0f 91       	pop	r16
 1ba:	08 95       	ret

000001bc <Send_4bit_cmd>:
	_delay_ms(20);
}

void Send_4bit_cmd(char cmd)
{
	PORTA = (PORTA & 0x0F) | (cmd & 0xF0);
 1bc:	9b b3       	in	r25, 0x1b	; 27
 1be:	9f 70       	andi	r25, 0x0F	; 15
 1c0:	28 2f       	mov	r18, r24
 1c2:	20 7f       	andi	r18, 0xF0	; 240
 1c4:	92 2b       	or	r25, r18
 1c6:	9b bb       	out	0x1b, r25	; 27
	clrbit(PORTB,RS); // Send cmd
 1c8:	98 b3       	in	r25, 0x18	; 24
 1ca:	9d 7f       	andi	r25, 0xFD	; 253
 1cc:	98 bb       	out	0x18, r25	; 24
	clrbit(PORTB,RW); // Write cmd
 1ce:	98 b3       	in	r25, 0x18	; 24
 1d0:	9b 7f       	andi	r25, 0xFB	; 251
 1d2:	98 bb       	out	0x18, r25	; 24
	setbit(PORTB,En); // For the LCD to take the cmd
 1d4:	98 b3       	in	r25, 0x18	; 24
 1d6:	91 60       	ori	r25, 0x01	; 1
 1d8:	98 bb       	out	0x18, r25	; 24
 1da:	e9 ef       	ldi	r30, 0xF9	; 249
 1dc:	f0 e0       	ldi	r31, 0x00	; 0
 1de:	31 97       	sbiw	r30, 0x01	; 1
 1e0:	f1 f7       	brne	.-4      	; 0x1de <Send_4bit_cmd+0x22>
 1e2:	00 c0       	rjmp	.+0      	; 0x1e4 <Send_4bit_cmd+0x28>
 1e4:	00 00       	nop
	_delay_ms(1);
	clrbit(PORTB,En); // To make LCD display the sent cmd
 1e6:	98 b3       	in	r25, 0x18	; 24
 1e8:	9e 7f       	andi	r25, 0xFE	; 254
 1ea:	98 bb       	out	0x18, r25	; 24
	PORTA = (PORTA & 0x0F) | (cmd << 4); 
 1ec:	2b b3       	in	r18, 0x1b	; 27
 1ee:	f0 e1       	ldi	r31, 0x10	; 16
 1f0:	8f 9f       	mul	r24, r31
 1f2:	c0 01       	movw	r24, r0
 1f4:	11 24       	eor	r1, r1
 1f6:	92 2f       	mov	r25, r18
 1f8:	9f 70       	andi	r25, 0x0F	; 15
 1fa:	89 2b       	or	r24, r25
 1fc:	8b bb       	out	0x1b, r24	; 27
 1fe:	89 ef       	ldi	r24, 0xF9	; 249
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	01 97       	sbiw	r24, 0x01	; 1
 204:	f1 f7       	brne	.-4      	; 0x202 <Send_4bit_cmd+0x46>
 206:	00 c0       	rjmp	.+0      	; 0x208 <Send_4bit_cmd+0x4c>
 208:	00 00       	nop
	_delay_ms(1);
	setbit(PORTB,En);
 20a:	88 b3       	in	r24, 0x18	; 24
 20c:	81 60       	ori	r24, 0x01	; 1
 20e:	88 bb       	out	0x18, r24	; 24
 210:	e9 ef       	ldi	r30, 0xF9	; 249
 212:	f0 e0       	ldi	r31, 0x00	; 0
 214:	31 97       	sbiw	r30, 0x01	; 1
 216:	f1 f7       	brne	.-4      	; 0x214 <Send_4bit_cmd+0x58>
 218:	00 c0       	rjmp	.+0      	; 0x21a <Send_4bit_cmd+0x5e>
 21a:	00 00       	nop
	_delay_ms(1);
	clrbit(PORTB,En);
 21c:	88 b3       	in	r24, 0x18	; 24
 21e:	8e 7f       	andi	r24, 0xFE	; 254
 220:	88 bb       	out	0x18, r24	; 24
 222:	87 e8       	ldi	r24, 0x87	; 135
 224:	93 e1       	ldi	r25, 0x13	; 19
 226:	01 97       	sbiw	r24, 0x01	; 1
 228:	f1 f7       	brne	.-4      	; 0x226 <Send_4bit_cmd+0x6a>
 22a:	00 c0       	rjmp	.+0      	; 0x22c <Send_4bit_cmd+0x70>
 22c:	00 00       	nop
 22e:	08 95       	ret

00000230 <LCD_4bit_init>:
	clrbit(PORTB,En);
}

void LCD_4bit_init()
{
	DDRA |= 0xF0;
 230:	8a b3       	in	r24, 0x1a	; 26
 232:	80 6f       	ori	r24, 0xF0	; 240
 234:	8a bb       	out	0x1a, r24	; 26
	setbit(DDRB,RS);
 236:	87 b3       	in	r24, 0x17	; 23
 238:	82 60       	ori	r24, 0x02	; 2
 23a:	87 bb       	out	0x17, r24	; 23
	setbit(DDRB,RW);
 23c:	87 b3       	in	r24, 0x17	; 23
 23e:	84 60       	ori	r24, 0x04	; 4
 240:	87 bb       	out	0x17, r24	; 23
	setbit(DDRB,En);
 242:	87 b3       	in	r24, 0x17	; 23
 244:	81 60       	ori	r24, 0x01	; 1
 246:	87 bb       	out	0x17, r24	; 23
 248:	87 e8       	ldi	r24, 0x87	; 135
 24a:	93 e1       	ldi	r25, 0x13	; 19
 24c:	01 97       	sbiw	r24, 0x01	; 1
 24e:	f1 f7       	brne	.-4      	; 0x24c <LCD_4bit_init+0x1c>
 250:	00 c0       	rjmp	.+0      	; 0x252 <LCD_4bit_init+0x22>
 252:	00 00       	nop
	_delay_ms(20);
	Send_4bit_cmd(0x02);// return home
 254:	82 e0       	ldi	r24, 0x02	; 2
 256:	0e 94 de 00 	call	0x1bc	; 0x1bc <Send_4bit_cmd>
	Send_4bit_cmd(0x28);// 2 line and 4 bit mode
 25a:	88 e2       	ldi	r24, 0x28	; 40
 25c:	0e 94 de 00 	call	0x1bc	; 0x1bc <Send_4bit_cmd>
	Send_4bit_cmd(0x0E);// display on
 260:	8e e0       	ldi	r24, 0x0E	; 14
 262:	0e 94 de 00 	call	0x1bc	; 0x1bc <Send_4bit_cmd>
	Send_4bit_cmd(0x06);// auto increment
 266:	86 e0       	ldi	r24, 0x06	; 6
 268:	0e 94 de 00 	call	0x1bc	; 0x1bc <Send_4bit_cmd>
	Send_4bit_cmd(0x01);// clear screen
 26c:	81 e0       	ldi	r24, 0x01	; 1
 26e:	0e 94 de 00 	call	0x1bc	; 0x1bc <Send_4bit_cmd>
 272:	87 e8       	ldi	r24, 0x87	; 135
 274:	93 e1       	ldi	r25, 0x13	; 19
 276:	01 97       	sbiw	r24, 0x01	; 1
 278:	f1 f7       	brne	.-4      	; 0x276 <LCD_4bit_init+0x46>
 27a:	00 c0       	rjmp	.+0      	; 0x27c <LCD_4bit_init+0x4c>
 27c:	00 00       	nop
 27e:	08 95       	ret

00000280 <Send_4bit_string>:
	clrbit(PORTB,En);
	_delay_ms(20);
}

void Send_4bit_string(char *ptr)
{
 280:	0f 93       	push	r16
 282:	1f 93       	push	r17
 284:	cf 93       	push	r28
 286:	df 93       	push	r29
 288:	8c 01       	movw	r16, r24
	int i=0;
 28a:	c0 e0       	ldi	r28, 0x00	; 0
 28c:	d0 e0       	ldi	r29, 0x00	; 0
	while(ptr[i] != 0)
 28e:	03 c0       	rjmp	.+6      	; 0x296 <Send_4bit_string+0x16>
	{
		Send_4bit_Char(ptr[i]);
 290:	0e 94 6a 00 	call	0xd4	; 0xd4 <Send_4bit_Char>
		i++;
 294:	21 96       	adiw	r28, 0x01	; 1
}

void Send_4bit_string(char *ptr)
{
	int i=0;
	while(ptr[i] != 0)
 296:	f8 01       	movw	r30, r16
 298:	ec 0f       	add	r30, r28
 29a:	fd 1f       	adc	r31, r29
 29c:	80 81       	ld	r24, Z
 29e:	81 11       	cpse	r24, r1
 2a0:	f7 cf       	rjmp	.-18     	; 0x290 <Send_4bit_string+0x10>
	{
		Send_4bit_Char(ptr[i]);
		i++;
	}
 2a2:	df 91       	pop	r29
 2a4:	cf 91       	pop	r28
 2a6:	1f 91       	pop	r17
 2a8:	0f 91       	pop	r16
 2aa:	08 95       	ret

000002ac <main>:
#include "LCD.h"
#include "Timer.h"


int main(void)
{
 2ac:	cf 93       	push	r28
 2ae:	df 93       	push	r29
 2b0:	cd b7       	in	r28, 0x3d	; 61
 2b2:	de b7       	in	r29, 0x3e	; 62
 2b4:	28 97       	sbiw	r28, 0x08	; 8
 2b6:	0f b6       	in	r0, 0x3f	; 63
 2b8:	f8 94       	cli
 2ba:	de bf       	out	0x3e, r29	; 62
 2bc:	0f be       	out	0x3f, r0	; 63
 2be:	cd bf       	out	0x3d, r28	; 61
    LCD_4bit_init();
 2c0:	0e 94 18 01 	call	0x230	; 0x230 <LCD_4bit_init>
	ADC_Init();
 2c4:	0e 94 41 00 	call	0x82	; 0x82 <ADC_Init>
	Timer0_Fast_PWM_INIT();
 2c8:	0e 94 68 02 	call	0x4d0	; 0x4d0 <Timer0_Fast_PWM_INIT>
	setbit(DDRC,6);//HBridge pins output
 2cc:	84 b3       	in	r24, 0x14	; 20
 2ce:	80 64       	ori	r24, 0x40	; 64
 2d0:	84 bb       	out	0x14, r24	; 20
	setbit(DDRC,7);
 2d2:	84 b3       	in	r24, 0x14	; 20
 2d4:	80 68       	ori	r24, 0x80	; 128
 2d6:	84 bb       	out	0x14, r24	; 20
	clrbit(DDRA,0);//temp sensor pin Input
 2d8:	8a b3       	in	r24, 0x1a	; 26
 2da:	8e 7f       	andi	r24, 0xFE	; 254
 2dc:	8a bb       	out	0x1a, r24	; 26
	long long x = 0 , temp = 0;
 2de:	21 2c       	mov	r2, r1
 2e0:	31 2c       	mov	r3, r1
 2e2:	19 82       	std	Y+1, r1	; 0x01
 2e4:	1a 82       	std	Y+2, r1	; 0x02
 2e6:	1b 82       	std	Y+3, r1	; 0x03
 2e8:	1c 82       	std	Y+4, r1	; 0x04
 2ea:	1d 82       	std	Y+5, r1	; 0x05
 2ec:	1e 82       	std	Y+6, r1	; 0x06
 2ee:	09 c0       	rjmp	.+18     	; 0x302 <main+0x56>
#include "LCD.h"
#include "Timer.h"


int main(void)
{
 2f0:	28 84       	ldd	r2, Y+8	; 0x08
 2f2:	39 2c       	mov	r3, r9
 2f4:	8f 81       	ldd	r24, Y+7	; 0x07
 2f6:	89 83       	std	Y+1, r24	; 0x01
 2f8:	8a 82       	std	Y+2, r8	; 0x02
 2fa:	7b 82       	std	Y+3, r7	; 0x03
 2fc:	6c 82       	std	Y+4, r6	; 0x04
 2fe:	5d 82       	std	Y+5, r5	; 0x05
 300:	4e 82       	std	Y+6, r4	; 0x06
	clrbit(DDRA,0);//temp sensor pin Input
	long long x = 0 , temp = 0;
	int volt = 0 , temprature = 0;
    while (1) 
    {
		x = ADC_Read(0);
 302:	80 e0       	ldi	r24, 0x00	; 0
 304:	0e 94 4e 00 	call	0x9c	; 0x9c <ADC_Read>
 308:	b9 2e       	mov	r11, r25
 30a:	a8 2e       	mov	r10, r24
 30c:	88 87       	std	Y+8, r24	; 0x08
 30e:	99 2e       	mov	r9, r25
 310:	89 2f       	mov	r24, r25
 312:	88 0f       	add	r24, r24
 314:	88 0b       	sbc	r24, r24
 316:	8f 83       	std	Y+7, r24	; 0x07
 318:	88 2e       	mov	r8, r24
 31a:	78 2e       	mov	r7, r24
 31c:	68 2c       	mov	r6, r8
 31e:	58 2c       	mov	r5, r8
 320:	48 2c       	mov	r4, r8
		if (x != temp)
 322:	22 2d       	mov	r18, r2
 324:	33 2d       	mov	r19, r3
 326:	49 81       	ldd	r20, Y+1	; 0x01
 328:	5a 81       	ldd	r21, Y+2	; 0x02
 32a:	6b 81       	ldd	r22, Y+3	; 0x03
 32c:	7c 81       	ldd	r23, Y+4	; 0x04
 32e:	8d 81       	ldd	r24, Y+5	; 0x05
 330:	9e 81       	ldd	r25, Y+6	; 0x06
 332:	c8 2c       	mov	r12, r8
 334:	d8 2c       	mov	r13, r8
 336:	e8 2c       	mov	r14, r8
 338:	f8 2c       	mov	r15, r8
 33a:	08 2d       	mov	r16, r8
 33c:	18 2d       	mov	r17, r8
 33e:	0e 94 cd 04 	call	0x99a	; 0x99a <__cmpdi2>
 342:	f9 f2       	breq	.-66     	; 0x302 <main+0x56>
		{
			Send_4bit_cmd(0x01);//clear screen
 344:	81 e0       	ldi	r24, 0x01	; 1
 346:	0e 94 de 00 	call	0x1bc	; 0x1bc <Send_4bit_cmd>
			temp = x;
			volt = (2560 * x) / 1024;
 34a:	a1 2c       	mov	r10, r1
 34c:	0f 2e       	mov	r0, r31
 34e:	fa e0       	ldi	r31, 0x0A	; 10
 350:	bf 2e       	mov	r11, r31
 352:	f0 2d       	mov	r31, r0
 354:	c1 2c       	mov	r12, r1
 356:	d1 2c       	mov	r13, r1
 358:	e1 2c       	mov	r14, r1
 35a:	f1 2c       	mov	r15, r1
 35c:	00 e0       	ldi	r16, 0x00	; 0
 35e:	10 e0       	ldi	r17, 0x00	; 0
 360:	28 85       	ldd	r18, Y+8	; 0x08
 362:	39 2d       	mov	r19, r9
 364:	4f 81       	ldd	r20, Y+7	; 0x07
 366:	58 2d       	mov	r21, r8
 368:	68 2d       	mov	r22, r8
 36a:	78 2d       	mov	r23, r8
 36c:	88 2d       	mov	r24, r8
 36e:	98 2d       	mov	r25, r8
 370:	0e 94 56 04 	call	0x8ac	; 0x8ac <__muldi3>
 374:	b2 2f       	mov	r27, r18
 376:	f3 2f       	mov	r31, r19
 378:	e4 2f       	mov	r30, r20
 37a:	59 83       	std	Y+1, r21	; 0x01
 37c:	6a 83       	std	Y+2, r22	; 0x02
 37e:	7b 83       	std	Y+3, r23	; 0x03
 380:	28 2e       	mov	r2, r24
 382:	39 2e       	mov	r3, r25
 384:	a0 e0       	ldi	r26, 0x00	; 0
 386:	0e 94 d6 04 	call	0x9ac	; 0x9ac <__cmpdi2_s8>
 38a:	84 f4       	brge	.+32     	; 0x3ac <main+0x100>
 38c:	21 50       	subi	r18, 0x01	; 1
 38e:	3c 4f       	sbci	r19, 0xFC	; 252
 390:	4f 4f       	sbci	r20, 0xFF	; 255
 392:	5f 4f       	sbci	r21, 0xFF	; 255
 394:	6f 4f       	sbci	r22, 0xFF	; 255
 396:	7f 4f       	sbci	r23, 0xFF	; 255
 398:	8f 4f       	sbci	r24, 0xFF	; 255
 39a:	9f 4f       	sbci	r25, 0xFF	; 255
 39c:	b2 2f       	mov	r27, r18
 39e:	f3 2f       	mov	r31, r19
 3a0:	e4 2f       	mov	r30, r20
 3a2:	59 83       	std	Y+1, r21	; 0x01
 3a4:	6a 83       	std	Y+2, r22	; 0x02
 3a6:	7b 83       	std	Y+3, r23	; 0x03
 3a8:	28 2e       	mov	r2, r24
 3aa:	39 2e       	mov	r3, r25
 3ac:	2b 2f       	mov	r18, r27
 3ae:	3f 2f       	mov	r19, r31
 3b0:	4e 2f       	mov	r20, r30
 3b2:	59 81       	ldd	r21, Y+1	; 0x01
 3b4:	6a 81       	ldd	r22, Y+2	; 0x02
 3b6:	7b 81       	ldd	r23, Y+3	; 0x03
 3b8:	82 2d       	mov	r24, r2
 3ba:	93 2d       	mov	r25, r3
 3bc:	0a e0       	ldi	r16, 0x0A	; 10
 3be:	0e 94 af 04 	call	0x95e	; 0x95e <__ashrdi3>
 3c2:	82 2f       	mov	r24, r18
 3c4:	93 2f       	mov	r25, r19
			temprature = volt / 10;
 3c6:	6a e0       	ldi	r22, 0x0A	; 10
 3c8:	70 e0       	ldi	r23, 0x00	; 0
 3ca:	0e 94 42 04 	call	0x884	; 0x884 <__divmodhi4>
 3ce:	8b 01       	movw	r16, r22
 3d0:	7b 01       	movw	r14, r22
			Send_4bit_string("temprature = ");
 3d2:	80 e6       	ldi	r24, 0x60	; 96
 3d4:	90 e0       	ldi	r25, 0x00	; 0
 3d6:	0e 94 40 01 	call	0x280	; 0x280 <Send_4bit_string>
			Send_4bit_Number(temprature);
 3da:	c8 01       	movw	r24, r16
 3dc:	0e 94 9e 00 	call	0x13c	; 0x13c <Send_4bit_Number>
			if (temprature < 25)
 3e0:	09 31       	cpi	r16, 0x19	; 25
 3e2:	11 05       	cpc	r17, r1
 3e4:	9c f4       	brge	.+38     	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
			{
				Send_4bit_cmd(0xC0);
 3e6:	80 ec       	ldi	r24, 0xC0	; 192
 3e8:	0e 94 de 00 	call	0x1bc	; 0x1bc <Send_4bit_cmd>
				Send_4bit_string("Fan off");
 3ec:	8e e6       	ldi	r24, 0x6E	; 110
 3ee:	90 e0       	ldi	r25, 0x00	; 0
 3f0:	0e 94 40 01 	call	0x280	; 0x280 <Send_4bit_string>
				clrbit(PORTC,6);
 3f4:	85 b3       	in	r24, 0x15	; 21
 3f6:	8f 7b       	andi	r24, 0xBF	; 191
 3f8:	85 bb       	out	0x15, r24	; 21
				clrbit(PORTC,7);
 3fa:	85 b3       	in	r24, 0x15	; 21
 3fc:	8f 77       	andi	r24, 0x7F	; 127
 3fe:	85 bb       	out	0x15, r24	; 21
				Timer0_Set_Duty_Cycle(0);
 400:	60 e0       	ldi	r22, 0x00	; 0
 402:	70 e0       	ldi	r23, 0x00	; 0
 404:	cb 01       	movw	r24, r22
 406:	0e 94 82 02 	call	0x504	; 0x504 <Timer0_Set_Duty_Cycle>
 40a:	72 cf       	rjmp	.-284    	; 0x2f0 <main+0x44>
			}
			else if (temprature >= 25 && temprature < 30)
 40c:	c8 01       	movw	r24, r16
 40e:	49 97       	sbiw	r24, 0x19	; 25
 410:	05 97       	sbiw	r24, 0x05	; 5
 412:	a0 f4       	brcc	.+40     	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
			{
				Send_4bit_cmd(0xC0);
 414:	80 ec       	ldi	r24, 0xC0	; 192
 416:	0e 94 de 00 	call	0x1bc	; 0x1bc <Send_4bit_cmd>
				Send_4bit_string("Fan on");
 41a:	86 e7       	ldi	r24, 0x76	; 118
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	0e 94 40 01 	call	0x280	; 0x280 <Send_4bit_string>
				setbit(PORTC,6);
 422:	85 b3       	in	r24, 0x15	; 21
 424:	80 64       	ori	r24, 0x40	; 64
 426:	85 bb       	out	0x15, r24	; 21
				clrbit(PORTC,7);
 428:	85 b3       	in	r24, 0x15	; 21
 42a:	8f 77       	andi	r24, 0x7F	; 127
 42c:	85 bb       	out	0x15, r24	; 21
				Timer0_Set_Duty_Cycle(0.25);
 42e:	60 e0       	ldi	r22, 0x00	; 0
 430:	70 e0       	ldi	r23, 0x00	; 0
 432:	80 e8       	ldi	r24, 0x80	; 128
 434:	9e e3       	ldi	r25, 0x3E	; 62
 436:	0e 94 82 02 	call	0x504	; 0x504 <Timer0_Set_Duty_Cycle>
 43a:	5a cf       	rjmp	.-332    	; 0x2f0 <main+0x44>
			}
			
			else if (temprature >= 30 && temprature < 35)
 43c:	c8 01       	movw	r24, r16
 43e:	4e 97       	sbiw	r24, 0x1e	; 30
 440:	05 97       	sbiw	r24, 0x05	; 5
 442:	a0 f4       	brcc	.+40     	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
			{
				Send_4bit_cmd(0xC0);
 444:	80 ec       	ldi	r24, 0xC0	; 192
 446:	0e 94 de 00 	call	0x1bc	; 0x1bc <Send_4bit_cmd>
				Send_4bit_string("Fan on");
 44a:	86 e7       	ldi	r24, 0x76	; 118
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	0e 94 40 01 	call	0x280	; 0x280 <Send_4bit_string>
				setbit(PORTC,6);
 452:	85 b3       	in	r24, 0x15	; 21
 454:	80 64       	ori	r24, 0x40	; 64
 456:	85 bb       	out	0x15, r24	; 21
				clrbit(PORTC,7);
 458:	85 b3       	in	r24, 0x15	; 21
 45a:	8f 77       	andi	r24, 0x7F	; 127
 45c:	85 bb       	out	0x15, r24	; 21
				Timer0_Set_Duty_Cycle(0.5);
 45e:	60 e0       	ldi	r22, 0x00	; 0
 460:	70 e0       	ldi	r23, 0x00	; 0
 462:	80 e0       	ldi	r24, 0x00	; 0
 464:	9f e3       	ldi	r25, 0x3F	; 63
 466:	0e 94 82 02 	call	0x504	; 0x504 <Timer0_Set_Duty_Cycle>
 46a:	42 cf       	rjmp	.-380    	; 0x2f0 <main+0x44>
			}
			
			else if (temprature >= 35 && temprature < 40)
 46c:	03 52       	subi	r16, 0x23	; 35
 46e:	11 09       	sbc	r17, r1
 470:	05 30       	cpi	r16, 0x05	; 5
 472:	11 05       	cpc	r17, r1
 474:	a0 f4       	brcc	.+40     	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
			{
				Send_4bit_cmd(0xC0);
 476:	80 ec       	ldi	r24, 0xC0	; 192
 478:	0e 94 de 00 	call	0x1bc	; 0x1bc <Send_4bit_cmd>
				Send_4bit_string("Fan on");
 47c:	86 e7       	ldi	r24, 0x76	; 118
 47e:	90 e0       	ldi	r25, 0x00	; 0
 480:	0e 94 40 01 	call	0x280	; 0x280 <Send_4bit_string>
				setbit(PORTC,6);
 484:	85 b3       	in	r24, 0x15	; 21
 486:	80 64       	ori	r24, 0x40	; 64
 488:	85 bb       	out	0x15, r24	; 21
				clrbit(PORTC,7);
 48a:	85 b3       	in	r24, 0x15	; 21
 48c:	8f 77       	andi	r24, 0x7F	; 127
 48e:	85 bb       	out	0x15, r24	; 21
				Timer0_Set_Duty_Cycle(0.75);
 490:	60 e0       	ldi	r22, 0x00	; 0
 492:	70 e0       	ldi	r23, 0x00	; 0
 494:	80 e4       	ldi	r24, 0x40	; 64
 496:	9f e3       	ldi	r25, 0x3F	; 63
 498:	0e 94 82 02 	call	0x504	; 0x504 <Timer0_Set_Duty_Cycle>
 49c:	29 cf       	rjmp	.-430    	; 0x2f0 <main+0x44>
			}
			
			else if (temprature >= 40)
 49e:	88 e2       	ldi	r24, 0x28	; 40
 4a0:	e8 16       	cp	r14, r24
 4a2:	f1 04       	cpc	r15, r1
 4a4:	0c f4       	brge	.+2      	; 0x4a8 <__EEPROM_REGION_LENGTH__+0xa8>
 4a6:	24 cf       	rjmp	.-440    	; 0x2f0 <main+0x44>
			{
				Send_4bit_cmd(0xC0);
 4a8:	80 ec       	ldi	r24, 0xC0	; 192
 4aa:	0e 94 de 00 	call	0x1bc	; 0x1bc <Send_4bit_cmd>
				Send_4bit_string("Fan on");
 4ae:	86 e7       	ldi	r24, 0x76	; 118
 4b0:	90 e0       	ldi	r25, 0x00	; 0
 4b2:	0e 94 40 01 	call	0x280	; 0x280 <Send_4bit_string>
				setbit(PORTC,6);
 4b6:	85 b3       	in	r24, 0x15	; 21
 4b8:	80 64       	ori	r24, 0x40	; 64
 4ba:	85 bb       	out	0x15, r24	; 21
				clrbit(PORTC,7);
 4bc:	85 b3       	in	r24, 0x15	; 21
 4be:	8f 77       	andi	r24, 0x7F	; 127
 4c0:	85 bb       	out	0x15, r24	; 21
				Timer0_Set_Duty_Cycle(1);
 4c2:	60 e0       	ldi	r22, 0x00	; 0
 4c4:	70 e0       	ldi	r23, 0x00	; 0
 4c6:	80 e8       	ldi	r24, 0x80	; 128
 4c8:	9f e3       	ldi	r25, 0x3F	; 63
 4ca:	0e 94 82 02 	call	0x504	; 0x504 <Timer0_Set_Duty_Cycle>
 4ce:	10 cf       	rjmp	.-480    	; 0x2f0 <main+0x44>

000004d0 <Timer0_Fast_PWM_INIT>:
#include "Timer.h"


void Timer0_Fast_PWM_INIT()
{
	setbit(TCCR0,WGM00);// Set mode to Fast PWM
 4d0:	83 b7       	in	r24, 0x33	; 51
 4d2:	80 64       	ori	r24, 0x40	; 64
 4d4:	83 bf       	out	0x33, r24	; 51
	setbit(TCCR0,WGM01);
 4d6:	83 b7       	in	r24, 0x33	; 51
 4d8:	88 60       	ori	r24, 0x08	; 8
 4da:	83 bf       	out	0x33, r24	; 51
	
	setbit(DDRB,3);// Set OC0 as output
 4dc:	87 b3       	in	r24, 0x17	; 23
 4de:	88 60       	ori	r24, 0x08	; 8
 4e0:	87 bb       	out	0x17, r24	; 23
	
	clrbit(TCCR0,CS00);// PreScalar = 8
 4e2:	83 b7       	in	r24, 0x33	; 51
 4e4:	8e 7f       	andi	r24, 0xFE	; 254
 4e6:	83 bf       	out	0x33, r24	; 51
	setbit(TCCR0,CS01);
 4e8:	83 b7       	in	r24, 0x33	; 51
 4ea:	82 60       	ori	r24, 0x02	; 2
 4ec:	83 bf       	out	0x33, r24	; 51
	clrbit(TCCR0,CS02);
 4ee:	83 b7       	in	r24, 0x33	; 51
 4f0:	8b 7f       	andi	r24, 0xFB	; 251
 4f2:	83 bf       	out	0x33, r24	; 51
	
	clrbit(TCCR0,COM00);// nin_Inverting mode
 4f4:	83 b7       	in	r24, 0x33	; 51
 4f6:	8f 7e       	andi	r24, 0xEF	; 239
 4f8:	83 bf       	out	0x33, r24	; 51
	setbit(TCCR0,COM01);
 4fa:	83 b7       	in	r24, 0x33	; 51
 4fc:	80 62       	ori	r24, 0x20	; 32
 4fe:	83 bf       	out	0x33, r24	; 51
	
	OCR0 = 0;
 500:	1c be       	out	0x3c, r1	; 60
 502:	08 95       	ret

00000504 <Timer0_Set_Duty_Cycle>:
}

void Timer0_Set_Duty_Cycle(float DC)
{
 504:	cf 92       	push	r12
 506:	df 92       	push	r13
 508:	ef 92       	push	r14
 50a:	ff 92       	push	r15
 50c:	6b 01       	movw	r12, r22
 50e:	7c 01       	movw	r14, r24
	if(DC > 0 && DC <= 1)
 510:	20 e0       	ldi	r18, 0x00	; 0
 512:	30 e0       	ldi	r19, 0x00	; 0
 514:	a9 01       	movw	r20, r18
 516:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <__gesf2>
 51a:	18 16       	cp	r1, r24
 51c:	e4 f4       	brge	.+56     	; 0x556 <Timer0_Set_Duty_Cycle+0x52>
 51e:	20 e0       	ldi	r18, 0x00	; 0
 520:	30 e0       	ldi	r19, 0x00	; 0
 522:	40 e8       	ldi	r20, 0x80	; 128
 524:	5f e3       	ldi	r21, 0x3F	; 63
 526:	c7 01       	movw	r24, r14
 528:	b6 01       	movw	r22, r12
 52a:	0e 94 27 03 	call	0x64e	; 0x64e <__cmpsf2>
 52e:	18 16       	cp	r1, r24
 530:	94 f0       	brlt	.+36     	; 0x556 <Timer0_Set_Duty_Cycle+0x52>
	{
		DC = DC * 256;
 532:	20 e0       	ldi	r18, 0x00	; 0
 534:	30 e0       	ldi	r19, 0x00	; 0
 536:	40 e8       	ldi	r20, 0x80	; 128
 538:	53 e4       	ldi	r21, 0x43	; 67
 53a:	c7 01       	movw	r24, r14
 53c:	b6 01       	movw	r22, r12
 53e:	0e 94 d5 03 	call	0x7aa	; 0x7aa <__mulsf3>
		OCR0 = DC - 1;
 542:	20 e0       	ldi	r18, 0x00	; 0
 544:	30 e0       	ldi	r19, 0x00	; 0
 546:	40 e8       	ldi	r20, 0x80	; 128
 548:	5f e3       	ldi	r21, 0x3F	; 63
 54a:	0e 94 ba 02 	call	0x574	; 0x574 <__subsf3>
 54e:	0e 94 2c 03 	call	0x658	; 0x658 <__fixunssfsi>
 552:	6c bf       	out	0x3c, r22	; 60
 554:	0a c0       	rjmp	.+20     	; 0x56a <Timer0_Set_Duty_Cycle+0x66>
	}

	else if(DC <= 0)
 556:	20 e0       	ldi	r18, 0x00	; 0
 558:	30 e0       	ldi	r19, 0x00	; 0
 55a:	a9 01       	movw	r20, r18
 55c:	c7 01       	movw	r24, r14
 55e:	b6 01       	movw	r22, r12
 560:	0e 94 27 03 	call	0x64e	; 0x64e <__cmpsf2>
 564:	18 16       	cp	r1, r24
 566:	0c f0       	brlt	.+2      	; 0x56a <Timer0_Set_Duty_Cycle+0x66>
	{
		OCR0 = 0;
 568:	1c be       	out	0x3c, r1	; 60
	}
	
}
 56a:	ff 90       	pop	r15
 56c:	ef 90       	pop	r14
 56e:	df 90       	pop	r13
 570:	cf 90       	pop	r12
 572:	08 95       	ret

00000574 <__subsf3>:
 574:	50 58       	subi	r21, 0x80	; 128

00000576 <__addsf3>:
 576:	bb 27       	eor	r27, r27
 578:	aa 27       	eor	r26, r26
 57a:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <__addsf3x>
 57e:	0c 94 96 03 	jmp	0x72c	; 0x72c <__fp_round>
 582:	0e 94 88 03 	call	0x710	; 0x710 <__fp_pscA>
 586:	38 f0       	brcs	.+14     	; 0x596 <__addsf3+0x20>
 588:	0e 94 8f 03 	call	0x71e	; 0x71e <__fp_pscB>
 58c:	20 f0       	brcs	.+8      	; 0x596 <__addsf3+0x20>
 58e:	39 f4       	brne	.+14     	; 0x59e <__addsf3+0x28>
 590:	9f 3f       	cpi	r25, 0xFF	; 255
 592:	19 f4       	brne	.+6      	; 0x59a <__addsf3+0x24>
 594:	26 f4       	brtc	.+8      	; 0x59e <__addsf3+0x28>
 596:	0c 94 85 03 	jmp	0x70a	; 0x70a <__fp_nan>
 59a:	0e f4       	brtc	.+2      	; 0x59e <__addsf3+0x28>
 59c:	e0 95       	com	r30
 59e:	e7 fb       	bst	r30, 7
 5a0:	0c 94 7f 03 	jmp	0x6fe	; 0x6fe <__fp_inf>

000005a4 <__addsf3x>:
 5a4:	e9 2f       	mov	r30, r25
 5a6:	0e 94 a7 03 	call	0x74e	; 0x74e <__fp_split3>
 5aa:	58 f3       	brcs	.-42     	; 0x582 <__addsf3+0xc>
 5ac:	ba 17       	cp	r27, r26
 5ae:	62 07       	cpc	r22, r18
 5b0:	73 07       	cpc	r23, r19
 5b2:	84 07       	cpc	r24, r20
 5b4:	95 07       	cpc	r25, r21
 5b6:	20 f0       	brcs	.+8      	; 0x5c0 <__addsf3x+0x1c>
 5b8:	79 f4       	brne	.+30     	; 0x5d8 <__addsf3x+0x34>
 5ba:	a6 f5       	brtc	.+104    	; 0x624 <__addsf3x+0x80>
 5bc:	0c 94 c9 03 	jmp	0x792	; 0x792 <__fp_zero>
 5c0:	0e f4       	brtc	.+2      	; 0x5c4 <__addsf3x+0x20>
 5c2:	e0 95       	com	r30
 5c4:	0b 2e       	mov	r0, r27
 5c6:	ba 2f       	mov	r27, r26
 5c8:	a0 2d       	mov	r26, r0
 5ca:	0b 01       	movw	r0, r22
 5cc:	b9 01       	movw	r22, r18
 5ce:	90 01       	movw	r18, r0
 5d0:	0c 01       	movw	r0, r24
 5d2:	ca 01       	movw	r24, r20
 5d4:	a0 01       	movw	r20, r0
 5d6:	11 24       	eor	r1, r1
 5d8:	ff 27       	eor	r31, r31
 5da:	59 1b       	sub	r21, r25
 5dc:	99 f0       	breq	.+38     	; 0x604 <__addsf3x+0x60>
 5de:	59 3f       	cpi	r21, 0xF9	; 249
 5e0:	50 f4       	brcc	.+20     	; 0x5f6 <__addsf3x+0x52>
 5e2:	50 3e       	cpi	r21, 0xE0	; 224
 5e4:	68 f1       	brcs	.+90     	; 0x640 <__addsf3x+0x9c>
 5e6:	1a 16       	cp	r1, r26
 5e8:	f0 40       	sbci	r31, 0x00	; 0
 5ea:	a2 2f       	mov	r26, r18
 5ec:	23 2f       	mov	r18, r19
 5ee:	34 2f       	mov	r19, r20
 5f0:	44 27       	eor	r20, r20
 5f2:	58 5f       	subi	r21, 0xF8	; 248
 5f4:	f3 cf       	rjmp	.-26     	; 0x5dc <__addsf3x+0x38>
 5f6:	46 95       	lsr	r20
 5f8:	37 95       	ror	r19
 5fa:	27 95       	ror	r18
 5fc:	a7 95       	ror	r26
 5fe:	f0 40       	sbci	r31, 0x00	; 0
 600:	53 95       	inc	r21
 602:	c9 f7       	brne	.-14     	; 0x5f6 <__addsf3x+0x52>
 604:	7e f4       	brtc	.+30     	; 0x624 <__addsf3x+0x80>
 606:	1f 16       	cp	r1, r31
 608:	ba 0b       	sbc	r27, r26
 60a:	62 0b       	sbc	r22, r18
 60c:	73 0b       	sbc	r23, r19
 60e:	84 0b       	sbc	r24, r20
 610:	ba f0       	brmi	.+46     	; 0x640 <__addsf3x+0x9c>
 612:	91 50       	subi	r25, 0x01	; 1
 614:	a1 f0       	breq	.+40     	; 0x63e <__addsf3x+0x9a>
 616:	ff 0f       	add	r31, r31
 618:	bb 1f       	adc	r27, r27
 61a:	66 1f       	adc	r22, r22
 61c:	77 1f       	adc	r23, r23
 61e:	88 1f       	adc	r24, r24
 620:	c2 f7       	brpl	.-16     	; 0x612 <__addsf3x+0x6e>
 622:	0e c0       	rjmp	.+28     	; 0x640 <__addsf3x+0x9c>
 624:	ba 0f       	add	r27, r26
 626:	62 1f       	adc	r22, r18
 628:	73 1f       	adc	r23, r19
 62a:	84 1f       	adc	r24, r20
 62c:	48 f4       	brcc	.+18     	; 0x640 <__addsf3x+0x9c>
 62e:	87 95       	ror	r24
 630:	77 95       	ror	r23
 632:	67 95       	ror	r22
 634:	b7 95       	ror	r27
 636:	f7 95       	ror	r31
 638:	9e 3f       	cpi	r25, 0xFE	; 254
 63a:	08 f0       	brcs	.+2      	; 0x63e <__addsf3x+0x9a>
 63c:	b0 cf       	rjmp	.-160    	; 0x59e <__addsf3+0x28>
 63e:	93 95       	inc	r25
 640:	88 0f       	add	r24, r24
 642:	08 f0       	brcs	.+2      	; 0x646 <__addsf3x+0xa2>
 644:	99 27       	eor	r25, r25
 646:	ee 0f       	add	r30, r30
 648:	97 95       	ror	r25
 64a:	87 95       	ror	r24
 64c:	08 95       	ret

0000064e <__cmpsf2>:
 64e:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <__fp_cmp>
 652:	08 f4       	brcc	.+2      	; 0x656 <__cmpsf2+0x8>
 654:	81 e0       	ldi	r24, 0x01	; 1
 656:	08 95       	ret

00000658 <__fixunssfsi>:
 658:	0e 94 af 03 	call	0x75e	; 0x75e <__fp_splitA>
 65c:	88 f0       	brcs	.+34     	; 0x680 <__fixunssfsi+0x28>
 65e:	9f 57       	subi	r25, 0x7F	; 127
 660:	98 f0       	brcs	.+38     	; 0x688 <__fixunssfsi+0x30>
 662:	b9 2f       	mov	r27, r25
 664:	99 27       	eor	r25, r25
 666:	b7 51       	subi	r27, 0x17	; 23
 668:	b0 f0       	brcs	.+44     	; 0x696 <__fixunssfsi+0x3e>
 66a:	e1 f0       	breq	.+56     	; 0x6a4 <__fixunssfsi+0x4c>
 66c:	66 0f       	add	r22, r22
 66e:	77 1f       	adc	r23, r23
 670:	88 1f       	adc	r24, r24
 672:	99 1f       	adc	r25, r25
 674:	1a f0       	brmi	.+6      	; 0x67c <__fixunssfsi+0x24>
 676:	ba 95       	dec	r27
 678:	c9 f7       	brne	.-14     	; 0x66c <__fixunssfsi+0x14>
 67a:	14 c0       	rjmp	.+40     	; 0x6a4 <__fixunssfsi+0x4c>
 67c:	b1 30       	cpi	r27, 0x01	; 1
 67e:	91 f0       	breq	.+36     	; 0x6a4 <__fixunssfsi+0x4c>
 680:	0e 94 c9 03 	call	0x792	; 0x792 <__fp_zero>
 684:	b1 e0       	ldi	r27, 0x01	; 1
 686:	08 95       	ret
 688:	0c 94 c9 03 	jmp	0x792	; 0x792 <__fp_zero>
 68c:	67 2f       	mov	r22, r23
 68e:	78 2f       	mov	r23, r24
 690:	88 27       	eor	r24, r24
 692:	b8 5f       	subi	r27, 0xF8	; 248
 694:	39 f0       	breq	.+14     	; 0x6a4 <__fixunssfsi+0x4c>
 696:	b9 3f       	cpi	r27, 0xF9	; 249
 698:	cc f3       	brlt	.-14     	; 0x68c <__fixunssfsi+0x34>
 69a:	86 95       	lsr	r24
 69c:	77 95       	ror	r23
 69e:	67 95       	ror	r22
 6a0:	b3 95       	inc	r27
 6a2:	d9 f7       	brne	.-10     	; 0x69a <__fixunssfsi+0x42>
 6a4:	3e f4       	brtc	.+14     	; 0x6b4 <__fixunssfsi+0x5c>
 6a6:	90 95       	com	r25
 6a8:	80 95       	com	r24
 6aa:	70 95       	com	r23
 6ac:	61 95       	neg	r22
 6ae:	7f 4f       	sbci	r23, 0xFF	; 255
 6b0:	8f 4f       	sbci	r24, 0xFF	; 255
 6b2:	9f 4f       	sbci	r25, 0xFF	; 255
 6b4:	08 95       	ret

000006b6 <__fp_cmp>:
 6b6:	99 0f       	add	r25, r25
 6b8:	00 08       	sbc	r0, r0
 6ba:	55 0f       	add	r21, r21
 6bc:	aa 0b       	sbc	r26, r26
 6be:	e0 e8       	ldi	r30, 0x80	; 128
 6c0:	fe ef       	ldi	r31, 0xFE	; 254
 6c2:	16 16       	cp	r1, r22
 6c4:	17 06       	cpc	r1, r23
 6c6:	e8 07       	cpc	r30, r24
 6c8:	f9 07       	cpc	r31, r25
 6ca:	c0 f0       	brcs	.+48     	; 0x6fc <__fp_cmp+0x46>
 6cc:	12 16       	cp	r1, r18
 6ce:	13 06       	cpc	r1, r19
 6d0:	e4 07       	cpc	r30, r20
 6d2:	f5 07       	cpc	r31, r21
 6d4:	98 f0       	brcs	.+38     	; 0x6fc <__fp_cmp+0x46>
 6d6:	62 1b       	sub	r22, r18
 6d8:	73 0b       	sbc	r23, r19
 6da:	84 0b       	sbc	r24, r20
 6dc:	95 0b       	sbc	r25, r21
 6de:	39 f4       	brne	.+14     	; 0x6ee <__fp_cmp+0x38>
 6e0:	0a 26       	eor	r0, r26
 6e2:	61 f0       	breq	.+24     	; 0x6fc <__fp_cmp+0x46>
 6e4:	23 2b       	or	r18, r19
 6e6:	24 2b       	or	r18, r20
 6e8:	25 2b       	or	r18, r21
 6ea:	21 f4       	brne	.+8      	; 0x6f4 <__fp_cmp+0x3e>
 6ec:	08 95       	ret
 6ee:	0a 26       	eor	r0, r26
 6f0:	09 f4       	brne	.+2      	; 0x6f4 <__fp_cmp+0x3e>
 6f2:	a1 40       	sbci	r26, 0x01	; 1
 6f4:	a6 95       	lsr	r26
 6f6:	8f ef       	ldi	r24, 0xFF	; 255
 6f8:	81 1d       	adc	r24, r1
 6fa:	81 1d       	adc	r24, r1
 6fc:	08 95       	ret

000006fe <__fp_inf>:
 6fe:	97 f9       	bld	r25, 7
 700:	9f 67       	ori	r25, 0x7F	; 127
 702:	80 e8       	ldi	r24, 0x80	; 128
 704:	70 e0       	ldi	r23, 0x00	; 0
 706:	60 e0       	ldi	r22, 0x00	; 0
 708:	08 95       	ret

0000070a <__fp_nan>:
 70a:	9f ef       	ldi	r25, 0xFF	; 255
 70c:	80 ec       	ldi	r24, 0xC0	; 192
 70e:	08 95       	ret

00000710 <__fp_pscA>:
 710:	00 24       	eor	r0, r0
 712:	0a 94       	dec	r0
 714:	16 16       	cp	r1, r22
 716:	17 06       	cpc	r1, r23
 718:	18 06       	cpc	r1, r24
 71a:	09 06       	cpc	r0, r25
 71c:	08 95       	ret

0000071e <__fp_pscB>:
 71e:	00 24       	eor	r0, r0
 720:	0a 94       	dec	r0
 722:	12 16       	cp	r1, r18
 724:	13 06       	cpc	r1, r19
 726:	14 06       	cpc	r1, r20
 728:	05 06       	cpc	r0, r21
 72a:	08 95       	ret

0000072c <__fp_round>:
 72c:	09 2e       	mov	r0, r25
 72e:	03 94       	inc	r0
 730:	00 0c       	add	r0, r0
 732:	11 f4       	brne	.+4      	; 0x738 <__fp_round+0xc>
 734:	88 23       	and	r24, r24
 736:	52 f0       	brmi	.+20     	; 0x74c <__fp_round+0x20>
 738:	bb 0f       	add	r27, r27
 73a:	40 f4       	brcc	.+16     	; 0x74c <__fp_round+0x20>
 73c:	bf 2b       	or	r27, r31
 73e:	11 f4       	brne	.+4      	; 0x744 <__fp_round+0x18>
 740:	60 ff       	sbrs	r22, 0
 742:	04 c0       	rjmp	.+8      	; 0x74c <__fp_round+0x20>
 744:	6f 5f       	subi	r22, 0xFF	; 255
 746:	7f 4f       	sbci	r23, 0xFF	; 255
 748:	8f 4f       	sbci	r24, 0xFF	; 255
 74a:	9f 4f       	sbci	r25, 0xFF	; 255
 74c:	08 95       	ret

0000074e <__fp_split3>:
 74e:	57 fd       	sbrc	r21, 7
 750:	90 58       	subi	r25, 0x80	; 128
 752:	44 0f       	add	r20, r20
 754:	55 1f       	adc	r21, r21
 756:	59 f0       	breq	.+22     	; 0x76e <__fp_splitA+0x10>
 758:	5f 3f       	cpi	r21, 0xFF	; 255
 75a:	71 f0       	breq	.+28     	; 0x778 <__fp_splitA+0x1a>
 75c:	47 95       	ror	r20

0000075e <__fp_splitA>:
 75e:	88 0f       	add	r24, r24
 760:	97 fb       	bst	r25, 7
 762:	99 1f       	adc	r25, r25
 764:	61 f0       	breq	.+24     	; 0x77e <__fp_splitA+0x20>
 766:	9f 3f       	cpi	r25, 0xFF	; 255
 768:	79 f0       	breq	.+30     	; 0x788 <__fp_splitA+0x2a>
 76a:	87 95       	ror	r24
 76c:	08 95       	ret
 76e:	12 16       	cp	r1, r18
 770:	13 06       	cpc	r1, r19
 772:	14 06       	cpc	r1, r20
 774:	55 1f       	adc	r21, r21
 776:	f2 cf       	rjmp	.-28     	; 0x75c <__fp_split3+0xe>
 778:	46 95       	lsr	r20
 77a:	f1 df       	rcall	.-30     	; 0x75e <__fp_splitA>
 77c:	08 c0       	rjmp	.+16     	; 0x78e <__fp_splitA+0x30>
 77e:	16 16       	cp	r1, r22
 780:	17 06       	cpc	r1, r23
 782:	18 06       	cpc	r1, r24
 784:	99 1f       	adc	r25, r25
 786:	f1 cf       	rjmp	.-30     	; 0x76a <__fp_splitA+0xc>
 788:	86 95       	lsr	r24
 78a:	71 05       	cpc	r23, r1
 78c:	61 05       	cpc	r22, r1
 78e:	08 94       	sec
 790:	08 95       	ret

00000792 <__fp_zero>:
 792:	e8 94       	clt

00000794 <__fp_szero>:
 794:	bb 27       	eor	r27, r27
 796:	66 27       	eor	r22, r22
 798:	77 27       	eor	r23, r23
 79a:	cb 01       	movw	r24, r22
 79c:	97 f9       	bld	r25, 7
 79e:	08 95       	ret

000007a0 <__gesf2>:
 7a0:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <__fp_cmp>
 7a4:	08 f4       	brcc	.+2      	; 0x7a8 <__gesf2+0x8>
 7a6:	8f ef       	ldi	r24, 0xFF	; 255
 7a8:	08 95       	ret

000007aa <__mulsf3>:
 7aa:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <__mulsf3x>
 7ae:	0c 94 96 03 	jmp	0x72c	; 0x72c <__fp_round>
 7b2:	0e 94 88 03 	call	0x710	; 0x710 <__fp_pscA>
 7b6:	38 f0       	brcs	.+14     	; 0x7c6 <__mulsf3+0x1c>
 7b8:	0e 94 8f 03 	call	0x71e	; 0x71e <__fp_pscB>
 7bc:	20 f0       	brcs	.+8      	; 0x7c6 <__mulsf3+0x1c>
 7be:	95 23       	and	r25, r21
 7c0:	11 f0       	breq	.+4      	; 0x7c6 <__mulsf3+0x1c>
 7c2:	0c 94 7f 03 	jmp	0x6fe	; 0x6fe <__fp_inf>
 7c6:	0c 94 85 03 	jmp	0x70a	; 0x70a <__fp_nan>
 7ca:	11 24       	eor	r1, r1
 7cc:	0c 94 ca 03 	jmp	0x794	; 0x794 <__fp_szero>

000007d0 <__mulsf3x>:
 7d0:	0e 94 a7 03 	call	0x74e	; 0x74e <__fp_split3>
 7d4:	70 f3       	brcs	.-36     	; 0x7b2 <__mulsf3+0x8>

000007d6 <__mulsf3_pse>:
 7d6:	95 9f       	mul	r25, r21
 7d8:	c1 f3       	breq	.-16     	; 0x7ca <__mulsf3+0x20>
 7da:	95 0f       	add	r25, r21
 7dc:	50 e0       	ldi	r21, 0x00	; 0
 7de:	55 1f       	adc	r21, r21
 7e0:	62 9f       	mul	r22, r18
 7e2:	f0 01       	movw	r30, r0
 7e4:	72 9f       	mul	r23, r18
 7e6:	bb 27       	eor	r27, r27
 7e8:	f0 0d       	add	r31, r0
 7ea:	b1 1d       	adc	r27, r1
 7ec:	63 9f       	mul	r22, r19
 7ee:	aa 27       	eor	r26, r26
 7f0:	f0 0d       	add	r31, r0
 7f2:	b1 1d       	adc	r27, r1
 7f4:	aa 1f       	adc	r26, r26
 7f6:	64 9f       	mul	r22, r20
 7f8:	66 27       	eor	r22, r22
 7fa:	b0 0d       	add	r27, r0
 7fc:	a1 1d       	adc	r26, r1
 7fe:	66 1f       	adc	r22, r22
 800:	82 9f       	mul	r24, r18
 802:	22 27       	eor	r18, r18
 804:	b0 0d       	add	r27, r0
 806:	a1 1d       	adc	r26, r1
 808:	62 1f       	adc	r22, r18
 80a:	73 9f       	mul	r23, r19
 80c:	b0 0d       	add	r27, r0
 80e:	a1 1d       	adc	r26, r1
 810:	62 1f       	adc	r22, r18
 812:	83 9f       	mul	r24, r19
 814:	a0 0d       	add	r26, r0
 816:	61 1d       	adc	r22, r1
 818:	22 1f       	adc	r18, r18
 81a:	74 9f       	mul	r23, r20
 81c:	33 27       	eor	r19, r19
 81e:	a0 0d       	add	r26, r0
 820:	61 1d       	adc	r22, r1
 822:	23 1f       	adc	r18, r19
 824:	84 9f       	mul	r24, r20
 826:	60 0d       	add	r22, r0
 828:	21 1d       	adc	r18, r1
 82a:	82 2f       	mov	r24, r18
 82c:	76 2f       	mov	r23, r22
 82e:	6a 2f       	mov	r22, r26
 830:	11 24       	eor	r1, r1
 832:	9f 57       	subi	r25, 0x7F	; 127
 834:	50 40       	sbci	r21, 0x00	; 0
 836:	9a f0       	brmi	.+38     	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
 838:	f1 f0       	breq	.+60     	; 0x876 <__stack+0x17>
 83a:	88 23       	and	r24, r24
 83c:	4a f0       	brmi	.+18     	; 0x850 <__DATA_REGION_LENGTH__+0x50>
 83e:	ee 0f       	add	r30, r30
 840:	ff 1f       	adc	r31, r31
 842:	bb 1f       	adc	r27, r27
 844:	66 1f       	adc	r22, r22
 846:	77 1f       	adc	r23, r23
 848:	88 1f       	adc	r24, r24
 84a:	91 50       	subi	r25, 0x01	; 1
 84c:	50 40       	sbci	r21, 0x00	; 0
 84e:	a9 f7       	brne	.-22     	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
 850:	9e 3f       	cpi	r25, 0xFE	; 254
 852:	51 05       	cpc	r21, r1
 854:	80 f0       	brcs	.+32     	; 0x876 <__stack+0x17>
 856:	0c 94 7f 03 	jmp	0x6fe	; 0x6fe <__fp_inf>
 85a:	0c 94 ca 03 	jmp	0x794	; 0x794 <__fp_szero>
 85e:	5f 3f       	cpi	r21, 0xFF	; 255
 860:	e4 f3       	brlt	.-8      	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
 862:	98 3e       	cpi	r25, 0xE8	; 232
 864:	d4 f3       	brlt	.-12     	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
 866:	86 95       	lsr	r24
 868:	77 95       	ror	r23
 86a:	67 95       	ror	r22
 86c:	b7 95       	ror	r27
 86e:	f7 95       	ror	r31
 870:	e7 95       	ror	r30
 872:	9f 5f       	subi	r25, 0xFF	; 255
 874:	c1 f7       	brne	.-16     	; 0x866 <__stack+0x7>
 876:	fe 2b       	or	r31, r30
 878:	88 0f       	add	r24, r24
 87a:	91 1d       	adc	r25, r1
 87c:	96 95       	lsr	r25
 87e:	87 95       	ror	r24
 880:	97 f9       	bld	r25, 7
 882:	08 95       	ret

00000884 <__divmodhi4>:
 884:	97 fb       	bst	r25, 7
 886:	07 2e       	mov	r0, r23
 888:	16 f4       	brtc	.+4      	; 0x88e <__divmodhi4+0xa>
 88a:	00 94       	com	r0
 88c:	07 d0       	rcall	.+14     	; 0x89c <__divmodhi4_neg1>
 88e:	77 fd       	sbrc	r23, 7
 890:	09 d0       	rcall	.+18     	; 0x8a4 <__divmodhi4_neg2>
 892:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <__udivmodhi4>
 896:	07 fc       	sbrc	r0, 7
 898:	05 d0       	rcall	.+10     	; 0x8a4 <__divmodhi4_neg2>
 89a:	3e f4       	brtc	.+14     	; 0x8aa <__divmodhi4_exit>

0000089c <__divmodhi4_neg1>:
 89c:	90 95       	com	r25
 89e:	81 95       	neg	r24
 8a0:	9f 4f       	sbci	r25, 0xFF	; 255
 8a2:	08 95       	ret

000008a4 <__divmodhi4_neg2>:
 8a4:	70 95       	com	r23
 8a6:	61 95       	neg	r22
 8a8:	7f 4f       	sbci	r23, 0xFF	; 255

000008aa <__divmodhi4_exit>:
 8aa:	08 95       	ret

000008ac <__muldi3>:
 8ac:	df 93       	push	r29
 8ae:	cf 93       	push	r28
 8b0:	1f 93       	push	r17
 8b2:	0f 93       	push	r16
 8b4:	9a 9d       	mul	r25, r10
 8b6:	f0 2d       	mov	r31, r0
 8b8:	21 9f       	mul	r18, r17
 8ba:	f0 0d       	add	r31, r0
 8bc:	8b 9d       	mul	r24, r11
 8be:	f0 0d       	add	r31, r0
 8c0:	8a 9d       	mul	r24, r10
 8c2:	e0 2d       	mov	r30, r0
 8c4:	f1 0d       	add	r31, r1
 8c6:	03 9f       	mul	r16, r19
 8c8:	f0 0d       	add	r31, r0
 8ca:	02 9f       	mul	r16, r18
 8cc:	e0 0d       	add	r30, r0
 8ce:	f1 1d       	adc	r31, r1
 8d0:	4e 9d       	mul	r20, r14
 8d2:	e0 0d       	add	r30, r0
 8d4:	f1 1d       	adc	r31, r1
 8d6:	5e 9d       	mul	r21, r14
 8d8:	f0 0d       	add	r31, r0
 8da:	4f 9d       	mul	r20, r15
 8dc:	f0 0d       	add	r31, r0
 8de:	7f 93       	push	r23
 8e0:	6f 93       	push	r22
 8e2:	bf 92       	push	r11
 8e4:	af 92       	push	r10
 8e6:	5f 93       	push	r21
 8e8:	4f 93       	push	r20
 8ea:	d5 01       	movw	r26, r10
 8ec:	0e 94 f6 04 	call	0x9ec	; 0x9ec <__umulhisi3>
 8f0:	8b 01       	movw	r16, r22
 8f2:	ac 01       	movw	r20, r24
 8f4:	d7 01       	movw	r26, r14
 8f6:	0e 94 f6 04 	call	0x9ec	; 0x9ec <__umulhisi3>
 8fa:	eb 01       	movw	r28, r22
 8fc:	e8 0f       	add	r30, r24
 8fe:	f9 1f       	adc	r31, r25
 900:	d6 01       	movw	r26, r12
 902:	0e 94 a6 04 	call	0x94c	; 0x94c <__muldi3_6>
 906:	2f 91       	pop	r18
 908:	3f 91       	pop	r19
 90a:	d6 01       	movw	r26, r12
 90c:	0e 94 f6 04 	call	0x9ec	; 0x9ec <__umulhisi3>
 910:	c6 0f       	add	r28, r22
 912:	d7 1f       	adc	r29, r23
 914:	e8 1f       	adc	r30, r24
 916:	f9 1f       	adc	r31, r25
 918:	af 91       	pop	r26
 91a:	bf 91       	pop	r27
 91c:	0e 94 a6 04 	call	0x94c	; 0x94c <__muldi3_6>
 920:	2f 91       	pop	r18
 922:	3f 91       	pop	r19
 924:	0e 94 f6 04 	call	0x9ec	; 0x9ec <__umulhisi3>
 928:	c6 0f       	add	r28, r22
 92a:	d7 1f       	adc	r29, r23
 92c:	e8 1f       	adc	r30, r24
 92e:	f9 1f       	adc	r31, r25
 930:	d6 01       	movw	r26, r12
 932:	0e 94 f6 04 	call	0x9ec	; 0x9ec <__umulhisi3>
 936:	e6 0f       	add	r30, r22
 938:	f7 1f       	adc	r31, r23
 93a:	98 01       	movw	r18, r16
 93c:	be 01       	movw	r22, r28
 93e:	cf 01       	movw	r24, r30
 940:	11 24       	eor	r1, r1
 942:	0f 91       	pop	r16
 944:	1f 91       	pop	r17
 946:	cf 91       	pop	r28
 948:	df 91       	pop	r29
 94a:	08 95       	ret

0000094c <__muldi3_6>:
 94c:	0e 94 f6 04 	call	0x9ec	; 0x9ec <__umulhisi3>
 950:	46 0f       	add	r20, r22
 952:	57 1f       	adc	r21, r23
 954:	c8 1f       	adc	r28, r24
 956:	d9 1f       	adc	r29, r25
 958:	08 f4       	brcc	.+2      	; 0x95c <__muldi3_6+0x10>
 95a:	31 96       	adiw	r30, 0x01	; 1
 95c:	08 95       	ret

0000095e <__ashrdi3>:
 95e:	97 fb       	bst	r25, 7
 960:	10 f8       	bld	r1, 0

00000962 <__lshrdi3>:
 962:	16 94       	lsr	r1
 964:	00 08       	sbc	r0, r0
 966:	0f 93       	push	r16
 968:	08 30       	cpi	r16, 0x08	; 8
 96a:	98 f0       	brcs	.+38     	; 0x992 <__lshrdi3+0x30>
 96c:	08 50       	subi	r16, 0x08	; 8
 96e:	23 2f       	mov	r18, r19
 970:	34 2f       	mov	r19, r20
 972:	45 2f       	mov	r20, r21
 974:	56 2f       	mov	r21, r22
 976:	67 2f       	mov	r22, r23
 978:	78 2f       	mov	r23, r24
 97a:	89 2f       	mov	r24, r25
 97c:	90 2d       	mov	r25, r0
 97e:	f4 cf       	rjmp	.-24     	; 0x968 <__lshrdi3+0x6>
 980:	05 94       	asr	r0
 982:	97 95       	ror	r25
 984:	87 95       	ror	r24
 986:	77 95       	ror	r23
 988:	67 95       	ror	r22
 98a:	57 95       	ror	r21
 98c:	47 95       	ror	r20
 98e:	37 95       	ror	r19
 990:	27 95       	ror	r18
 992:	0a 95       	dec	r16
 994:	aa f7       	brpl	.-22     	; 0x980 <__lshrdi3+0x1e>
 996:	0f 91       	pop	r16
 998:	08 95       	ret

0000099a <__cmpdi2>:
 99a:	2a 15       	cp	r18, r10
 99c:	3b 05       	cpc	r19, r11
 99e:	4c 05       	cpc	r20, r12
 9a0:	5d 05       	cpc	r21, r13
 9a2:	6e 05       	cpc	r22, r14
 9a4:	7f 05       	cpc	r23, r15
 9a6:	80 07       	cpc	r24, r16
 9a8:	91 07       	cpc	r25, r17
 9aa:	08 95       	ret

000009ac <__cmpdi2_s8>:
 9ac:	00 24       	eor	r0, r0
 9ae:	a7 fd       	sbrc	r26, 7
 9b0:	00 94       	com	r0
 9b2:	2a 17       	cp	r18, r26
 9b4:	30 05       	cpc	r19, r0
 9b6:	40 05       	cpc	r20, r0
 9b8:	50 05       	cpc	r21, r0
 9ba:	60 05       	cpc	r22, r0
 9bc:	70 05       	cpc	r23, r0
 9be:	80 05       	cpc	r24, r0
 9c0:	90 05       	cpc	r25, r0
 9c2:	08 95       	ret

000009c4 <__udivmodhi4>:
 9c4:	aa 1b       	sub	r26, r26
 9c6:	bb 1b       	sub	r27, r27
 9c8:	51 e1       	ldi	r21, 0x11	; 17
 9ca:	07 c0       	rjmp	.+14     	; 0x9da <__udivmodhi4_ep>

000009cc <__udivmodhi4_loop>:
 9cc:	aa 1f       	adc	r26, r26
 9ce:	bb 1f       	adc	r27, r27
 9d0:	a6 17       	cp	r26, r22
 9d2:	b7 07       	cpc	r27, r23
 9d4:	10 f0       	brcs	.+4      	; 0x9da <__udivmodhi4_ep>
 9d6:	a6 1b       	sub	r26, r22
 9d8:	b7 0b       	sbc	r27, r23

000009da <__udivmodhi4_ep>:
 9da:	88 1f       	adc	r24, r24
 9dc:	99 1f       	adc	r25, r25
 9de:	5a 95       	dec	r21
 9e0:	a9 f7       	brne	.-22     	; 0x9cc <__udivmodhi4_loop>
 9e2:	80 95       	com	r24
 9e4:	90 95       	com	r25
 9e6:	bc 01       	movw	r22, r24
 9e8:	cd 01       	movw	r24, r26
 9ea:	08 95       	ret

000009ec <__umulhisi3>:
 9ec:	a2 9f       	mul	r26, r18
 9ee:	b0 01       	movw	r22, r0
 9f0:	b3 9f       	mul	r27, r19
 9f2:	c0 01       	movw	r24, r0
 9f4:	a3 9f       	mul	r26, r19
 9f6:	70 0d       	add	r23, r0
 9f8:	81 1d       	adc	r24, r1
 9fa:	11 24       	eor	r1, r1
 9fc:	91 1d       	adc	r25, r1
 9fe:	b2 9f       	mul	r27, r18
 a00:	70 0d       	add	r23, r0
 a02:	81 1d       	adc	r24, r1
 a04:	11 24       	eor	r1, r1
 a06:	91 1d       	adc	r25, r1
 a08:	08 95       	ret

00000a0a <_exit>:
 a0a:	f8 94       	cli

00000a0c <__stop_program>:
 a0c:	ff cf       	rjmp	.-2      	; 0xa0c <__stop_program>
